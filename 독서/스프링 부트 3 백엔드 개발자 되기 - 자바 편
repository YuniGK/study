1장
- 라이브러리
	-> 개발에 필요한 기능을 모아놓은 코드의 모음

- 프레임워크
	-> 개발을 수월하게 하기 위한 개발 환경

2장
- IoC
	-> 제어의 역전
	다른 객체를 직접 생성, 제어하는 것이 아닌 외부에서 관리하는 객체를 가져와 사용

	예) public class A {
		b = new B()
	}
	=> 클래스 A가 B객체를 직접 만들어 사용
-> 객체의 생성과 관리를 개발자가 아니라 프레임워크가 대신

- DI
	-> 의존성 주입
	어떤 클래스가 다른 클래스에 의존

	예) public class A {
		@Autowird
		B b;
	}
	=> 클래스 A가 B개체를 직접 만드는 것이 아닌, 스프링 컨테이너가 생성해서 주입
-> 외부에서 객체를 주입받아 사용

- AOP
	-> 관점 지향 프로그래밍
	관심 기준으로 모듈화하는 것
-> 프로그램을 할 때, 핵심 관점과 부가 관점을 나누어서 개발

- PSA
-> 어느 기술을 사용하던 일관된 방식으로 처리

4장
- given
	-> 테스트 실행을 준비하는 단계	
- when
	-> 테스트를 진행하는 단계
- then
	-> 결과를 검증하는 단계

- JUnit 
	-> 자바 프로그램밍 언어용 단위 테스트 프레임워크

	단위 테스트 -> 작성한 코드가 의도대로 작동하는지 작은 단위로 검증
		단위는 보통 메서드
	
- AssertJ
	-> 검증문인 어설션을 작성하는데 사용되는 라이브러리

5장
- 영속성 컨테스트
	-> 엔티티를 관리하는 가상의 공간

- 1차캐시
	-> 엔티티를 조회하면 1차 캐시에서 데이터를 조회, 값이 있으면 반환
	값이 없으면 데이터베이스에서 조회해 1차 캐시에 저장한 다음 반환

- 쓰기 지연
	-> 트랜잭션을 커밋하기 전까지는 데이터베이스에 질의문을 보내지 않고
	쿼리를 모았다가 트랜잭션을 커밋하면 모아서 쿼리를 한번에 실행

- 엔티티의 상태
	-> 비영속(detached) - 엔티티 매니저가 엔티티를 관리하지 않는 상태 
	-> managed - 엔티티가 관리되는 상태
	-> transient - 엔티티 객체가 분리된 상태
	-> removed - 엔티티 객체가 삭제된 상태



